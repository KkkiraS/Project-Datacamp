{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Гипотезы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Уже пройденные доверительные интервалы служат фундаментом для образования и проверки статистических гипотез.\n",
    "Гипотезы же широко применяются в научных исследованиях, продуктовых A-B тестированиях и других статистических экспериментах.**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Рассмотрим простой пример использования гипотез:\n",
    "\n",
    "Предположим, на выздоровление при некотором заболевании в среднем требуется 25 дней.\n",
    "Однако недавно исследователи разработали новый препарат, и хотят проверить, сможет ли использование препарата\n",
    "снизить среднее количество дней, необходимых для выздоровления.\n",
    "Известно, что после проведения эксперимента на 60 испытуемых средний срок выздоровления сократился до 23 дней, при среднеквадратическом отклонении равным 4 дням.\n",
    "\n",
    "**Можно ли утверждать, что использование препарата действительно сокращает срок выздоровления, или же такой результат получен случайно, а препарат не повлиял на выздоровление испытуемых?**\n",
    "\n",
    "_Для упрощения предположим, что выбранный уровень доверия равен 95%_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Тестирование гипотез\n",
    "**Запишем имеющиеся данные:**\n",
    "\n",
    "$\\mu_0 = 25 \\\\ \\overline{X} = 23 \\\\ \\hat{\\sigma}^2 = 16   \\\\ n = 60 \\\\ (1 - \\alpha) = 0.95$\n",
    "\n",
    "**Рассмотрим 2 гипотезы:**\n",
    "\n",
    "$H_0: \\mu_1 = 25 \\\\ H_1: \\mu_1 \\neq 25$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Так как дисперсия всей генеральной совокупности нам неизвестна, а также количество испытуемых не очень велико, для построения доверительного интервала воспользуемся распределением **Стьюдента**. В ином случае можно было пользоваться **нормальным** распределением\n",
    "\n",
    "Для проверки гипотезы необходимо посчитать значение значение t - статистики, для которого мы проверяем гипотезу. \n",
    "\n",
    "Для этого воспользуемся формулой:\n",
    "\n",
    "<font size=\"3\">\n",
    "$$T = \\frac{\\overline{X} - \\mu_0}{\\sqrt{\\frac{\\hat{\\sigma}^2}{n}}}$$\n",
    "    $$T = \\frac{23 - 25}{\\sqrt{\\frac{16}{80}}}$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Кроме этого потребуется найти доверительный интервал для математического ожидания с параметрами\n",
    "\n",
    "<font size=\"5\">\n",
    "    $$t_{\\frac{\\alpha}{2}, (n - 1)} = t_{0.025, 79}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-2.904737509655563, (-2.00099537704821, 2.00099537704821))"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.stats import t, norm\n",
    "\n",
    "\n",
    "def getT(alpha, n):\n",
    "    res = (t(n).ppf(alpha), t(n).ppf(1 - alpha))\n",
    "    return (min(res), max(res))\n",
    "\n",
    "alpha = 1 - 0.95\n",
    "n = 60\n",
    "mu_0 = 25\n",
    "mean_sample = 23.5\n",
    "var_sample = 16\n",
    "DI = getT(alpha / 2, n - 1)\n",
    "T_value = (mean_sample - mu_0) / (np.sqrt(var_sample / n))\n",
    "T_value, DI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "print(T_value < min(DI) or T_value > max(DI))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заметим, что полученное значение не попадает внутрь рассчитанного доверительного интервала.\n",
    "Из этого следует, что для установленного уровня доверия в 95% нулевая гипотеза отвергается.\n",
    "\n",
    "**Следовательно, использование препарата влияет на количество дней, необходимых для выздоровления.**\n",
    "\n",
    "Кроме того, предполагая обратное, возможно выяснить, какова вероятность того, что среднее значение\n",
    "количества дней до выздоровления у испытуемых может отклониться от 25 на три и более дней."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для этого необходимо найти площадь под красной и зеленой кривыми, так как отклонение может происходить как в большую, так и в меньшую стороны"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x = np.arange(-25, 25, .05)\n",
    "y = np.arange(-25, T_value, .005)\n",
    "z = np.arange(-T_value, 25, .005)\n",
    "#x_t = np.arange(-1.5, 1.5, .05)\n",
    "fig, ax = plt.subplots(figsize=(10, 5))\n",
    "plt.style.use('fivethirtyeight')\n",
    "plt.plot(x, t.pdf(x, df=59), lw=3)\n",
    "#ax.fill_between(x_t, t.pdf(x_t, df=3), alpha=0.3, color='b')\n",
    "ax.fill_between(x ,t.pdf(x, df=59),0, alpha=0.1)\n",
    "ax.plot(y, t.pdf(y, df=59), color='r')\n",
    "ax.plot(z, t.pdf(z, df=59), color='g')\n",
    "ax.set_xlim([-6, 6])\n",
    "ax.set_yticklabels([])\n",
    "ax.set_title(r'$f(x) {\\sim} t_{n-1}$')\n",
    "ax.text(T_value, 0.03, r'${\\alpha}/2$',\n",
    "         horizontalalignment='center', fontsize=18)\n",
    "ax.text(0, 0.18, r'$1-{\\alpha}$',\n",
    "         horizontalalignment='center', fontsize=25)\n",
    "ax.text(-T_value, 0.03, r'${\\alpha}/2$',\n",
    "         horizontalalignment='center', fontsize=18)\n",
    "plt.savefig('student_curve.png', dpi=72, bbox_inches='tight')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для этого воспользуемся функцией \n",
    "\n",
    "```scipy.stats.cdf(value, df=df_example)```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Предполагая, что препарат не влияет на количество дней до выздоровления, \n",
      "такое (или меньше) выборочное среднее получаем с вероятностью 0.0052\n"
     ]
    }
   ],
   "source": [
    "p_value = t.cdf(T_value, df=59) * 2 # Так как распределение симметрично\n",
    "print(f\"\"\"Предполагая, что препарат не влияет на количество дней до выздоровления, \n",
    "такое (или меньше) выборочное среднее получаем с вероятностью {round(p_value, 4)}\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## P - value или P - уровень значимости"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Найденная в предыдущем задании вероятность и называется **P - value**\n",
    "\n",
    "Зададим ей более формальное определение:\n",
    "\n",
    "**P-value** - это вероятность, с которой (при условии истинности нулевой гипотезы) могла бы реализоваться наблюдаемая выборка, или любая другая выборка с ещё менее вероятным значением статистики"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 1\n",
    "\n",
    "Пусть дана выборка\n",
    "```\n",
    "[62.317, 51.824, 56.593, 55.186, 67.723, 56.283, 64.484, 78.092, 71.366, 56.047, 56.882, 64.098, 44.982, 52.241, 64.436, 58.881, 77.416, 54.434, 50.578, 51.993]\n",
    "```\n",
    "А также известнa дисперсия генеральной совокупности равная 81. И уровень доверия 99%\n",
    "\n",
    "1. Найти выборочное среднее\n",
    "2. Найти нужную статистику для гипотез: \n",
    "\n",
    "    $H_0: \\mu = 65 \\\\ H_1:  \\mu \\neq 65$\n",
    "    \n",
    "3. Реализовать функцию, для нахождения интервалов для нужного распределения\n",
    "4. Проверить гипотезу $H_0$\n",
    "5. Найти P - value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Выборочное среднее: 59.792799999999986\n"
     ]
    }
   ],
   "source": [
    "# 1\n",
    "\n",
    "alpha = 1 - ___\n",
    "sample = np.array()\n",
    "mean_value = _____\n",
    "print(f'Выборочное среднее: {mean_value}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2\n",
    "variance = 81\n",
    "n = _____\n",
    "value = _____"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3\n",
    "def getDI(alpha, n):\n",
    "    _____\n",
    "    return (min(res), max(res))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4\n",
    "di = getDI(alpha, ____)\n",
    "answer = False\n",
    "answer = _____\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5\n",
    "result = norm.cdf(Z_value) + norm.cdf(-Z_value)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([62.317, 51.824, 56.593, 55.186, 67.723, 56.283, 64.484, 78.092,\n",
       "       71.366, 56.047, 56.882, 64.098, 44.982, 52.241, 64.436, 58.881,\n",
       "       77.416, 54.434, 50.578, 51.993])"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ответы\n",
    "variance = 81\n",
    "\n",
    "sample = np.array([62.317, 51.824, 56.593, 55.186, 67.723, 56.283, \n",
    "                   64.484, 78.092, 71.366, 56.047, 56.882, 64.098, \n",
    "                   44.982, 52.241, 64.436, 58.881, 77.416, 54.434, \n",
    "                   50.578, 51.993])\n",
    "\n",
    "# 1  Выборочное среднее\n",
    "mean_sample = sample.mean()\n",
    "\n",
    "# 2 Z - статистика для гипотезы H_0\n",
    "Z_value = (mean_sample - mu) / np.sqrt(variance / n)\n",
    "\n",
    "# 3 Функция для нахождения нужного интервала\n",
    "def getNorm(alpha, n):\n",
    "    res = (sts.norm(mu, var).ppf(alpha), sts.norm(mu, var).ppf(1 - alpha))\n",
    "    return (min(res), max(res))\n",
    "\n",
    "# 4 Проверить гипотезу H_0\n",
    "# Вывести True, если H_0 выполнена и False в обратном случае\n",
    "di = getDI(alpha, len(sample))\n",
    "answer = False\n",
    "answer = Z_value < di[1] and Z_value > di[0]\n",
    "print(answer)\n",
    "\n",
    "# 5 Рассчитать P-value\n",
    "result = norm.cdf(Z_value) + norm.cdf(-Z_value)\n",
    "print(result)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
