{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Темы из статистики важны и часто применяются в финансах. Например, тема доверительный интервалов входит в международный экзамен <b>CFA Level 1</b> в часть Quantitative methods! Сейчас мы с вами решим задачи из этого экзамена.</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as sts\n",
    "from scipy.stats import norm, t, chi2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Следующие утверждения верны для любой случайной величины, имеющей нормальное распределение:\n",
    "\n",
    "50% ДИ: примерно 50% всех наблюдений попадают в диапазон μ ± (2/3)σ\n",
    "\n",
    "68% ДИ: примерно 68% всех наблюдений попадают в диапазон μ ± σ\n",
    "\n",
    "95% ДИ: примерно 95% всех наблюдений приходится на интервал μ ± 2σ\n",
    "\n",
    "99% ДИ: примерно 99% всех наблюдений приходится на интервал μ ± 3σ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Давайте проверим эти утверждения - найдите соответствующие вышеуказанным доверителям интервалам квантили для стандартного нормального распределения. Для этого воспользуйтесь библиотекой scipy.stats.\n",
    "\n",
    "Вам необходимо взять только квантиль, соответствующий правой границе интервала. Он будет определяться как $(1 - \\alpha + \\dfrac{\\alpha}{2})$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6744897501960817"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.norm.ppf(0.75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.994457883209753"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.norm.ppf(0.84)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.959963984540054"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.norm.ppf(0.975)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.5758293035489004"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.norm.ppf(0.995)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Средняя годовая доходность портфеля составляет 24%, стандартное отклонение - 5%. Предполагая нормальное распределение, рассчитайте 50% доверительный интервал для ожидаемой доходности.\n",
    "\n",
    "Для подсчёта используйте тот факт, что примерно 50% всех наблюдений попадают в диапазон μ ± (2/3)σ\n",
    "\n",
    "<i>Подставьте необходимые формулы для левого и правого конца доверительного интервала</i> и выведите данный интервал\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean = 0.24\n",
    "std = 0.05\n",
    "\n",
    "left = \n",
    "right = \n",
    "DI = (left, right)\n",
    "\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0.20666666666666667, 0.2733333333333333)\n"
     ]
    }
   ],
   "source": [
    "# answer\n",
    "\n",
    "mean = 0.24\n",
    "std = 0.05\n",
    "\n",
    "left = 0.24 - 2/3 * 0.05\n",
    "right = 0.24 + 2/3 * 0.05\n",
    "DI = (left, right)\n",
    "\n",
    "print(DI)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Решите предыдущую задачу для случая, если владелец портфеля хочет узнать 95% доверительный интервал для ожидаемой доходности.\n",
    "Помните, что примерно 95% всех наблюдений приходится на интервал μ ± 2σ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-28-d00c2a18f68a>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-28-d00c2a18f68a>\"\u001b[1;36m, line \u001b[1;32m4\u001b[0m\n\u001b[1;33m    left =\u001b[0m\n\u001b[1;37m           ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "mean = 0.24\n",
    "std = 0.05\n",
    "\n",
    "left = \n",
    "right = \n",
    "DI = (left, right)\n",
    "\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0.13999999999999999, 0.33999999999999997)\n"
     ]
    }
   ],
   "source": [
    "# answer\n",
    "\n",
    "mean = 0.24\n",
    "std = 0.05\n",
    "\n",
    "left = 0.24 - 2 * 0.05\n",
    "right = 0.24 + 2 * 0.05\n",
    "DI = (left, right)\n",
    "\n",
    "print(DI)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на ещё один интересный сюжет - доверительный интервал для разности математических ожиданий.\n",
    "\n",
    "### Задача\n",
    "Инвестор наблюдал за официальной ценой закрытия акции на протяжении двух недель. Акция очень волитальна (её цена сильно колеблется). Так, по прошествию первой недели на рынке произошёл новостной шок. Инвестор хочет оценить, как изменился perfomance ценной бумаги после новостного шока.\n",
    "Для усреднения цены акции за неделю будет использоваться математическое ожидание."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Итак, в нашей задаче наблюдения за каждую неделю - это связные выборки, так как мы наблюдали за одной и той же акцией в разные временные промежутки. \n",
    "\n",
    "1 неделя ($X_1$): 3001.1, 3033.3, 3035.1, 3100.9, 3077.5\n",
    "\n",
    "2 неделя ($Y_1$): 3350.1, 3401.0, 3101.1, 3011.6, 2990.8\n",
    "\n",
    "Пусть $U$ = $Y_1$ - $X_1$. Тогда $\\mu_U$ = $\\mu_y$ - $\\mu_x$.  n - количество наблюдений в выборках.\n",
    "\n",
    "Для разницы $\\mu_y$ и $\\mu_x$ доверительный интервал будет выглядеть так:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$P(\\bar{U} - t_{(n-1)(\\alpha/2)} * \\dfrac{\\hat{\\sigma_U}}{\\sqrt{n}} < \\mu_U < \\bar{U} + t_{(n-1)(\\alpha/2)} * \\dfrac{\\hat{\\sigma_U}}{\\sqrt{n}})=1-\\alpha$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# импортируйте библиотеку numpy для быстрого нахождения U\n",
    "\n",
    "x1 = np.array([3001.1, 3033.3, 3035.1, 3100.9, 3077.5])\n",
    "y1 = np.array([3350.1, 3401.0, 3101.1, 3011.6, 2990.8])\n",
    "\n",
    "# Найдите значения для U\n",
    "U =\n",
    "\n",
    "m = np.mean(U)\n",
    "n = len(U)\n",
    "var = np.square(U-m).sum() / (n-1)\n",
    "# Найдите выборочную дисперсию\n",
    "sigma = \n",
    "\n",
    "# Запишите в одной строке через запятую (параметр sep уже задан) левую границу доверительного интервала, математическое ожидание разности и правую границу ДИ.\n",
    "print(m - sigma, m, m + sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20.534570582730993, 121.33999999999996, 222.14542941726893\n"
     ]
    }
   ],
   "source": [
    "# импортируйте библиотеку numpy для быстрого нахождения U\n",
    "\n",
    "x1 = np.array([3001.1, 3033.3, 3035.1, 3100.9, 3077.5])\n",
    "y1 = np.array([3350.1, 3401.0, 3101.1, 3011.6, 2990.8])\n",
    "\n",
    "# Найдите значения для U\n",
    "U = y1 - x1\n",
    "\n",
    "m = np.mean(U)\n",
    "n = len(U)\n",
    "var = np.square(U-m).sum() / (n-1)\n",
    "# Найдите выборочную дисперсию\n",
    "sigma = np.sqrt(var/n)\n",
    "\n",
    "# Запишите в одной строке через запятую (параметр sep уже задан) левую границу доверительного интервала, математическое ожидание разности и правую границу ДИ.\n",
    "print(m - sigma, m, m + sigma, sep=', ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "До этого мы с Вами считали выборочную дисперсию \"вручную\", ведь обычная функция <i>np.std()</i> рассчитывает смещённую дисперсию.\n",
    "\n",
    "Сейчас, после того, как Вы натренировали понимание, мы с Вами научимся находить стандартное выборочное отклонение ещё быстрее - у функции <i>np.std()</i> есть параметр <i>ddof</i>. Найдите в документации, к какому числу необходимо приравнять значение данного параметра, или попробуйте угадать вручную - выборка Вам дана."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = np.array([3, 7, 6, 7, 9, -1, 10, 11, 6, -2, 7])\n",
    "\n",
    "# Найдём выборочную дисперсию вручную\n",
    "m = np.mean(sample)\n",
    "n = len(sample)\n",
    "var = np.square(sample-m).sum() / (n-1)\n",
    "sigma = np.sqrt(var/n)\n",
    "\n",
    "# А теперь заполните пропуски и проверьте, что вы получили значение, равное значению sigma (Последняя строчка должна вывести True)\n",
    "sigma_ddof = np.std(ddof = ___) / np.___\n",
    "\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "sample = np.array([3, 7, 6, 7, 9, -1, 10, 11, 6, -2, 7])\n",
    "\n",
    "# Найдём выборочную дисперсию вручную\n",
    "m = np.mean(sample)\n",
    "n = len(sample)\n",
    "var = np.square(sample-m).sum() / (n-1)\n",
    "sigma = np.sqrt(var/n)\n",
    "\n",
    "# А теперь заполните пропуски и проверьте, что вы получили значение, равное значению sigma (Последняя строчка должна вывести True)\n",
    "sigma_ddof = np.std(sample, ddof = 1) / np.sqrt(n)\n",
    "\n",
    "print(sigma == sigma_ddof)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Часто в экономике нужно считать ожидаемый доход. Пусть случайная величина X имеет нормальное распределение. $X {\\sim} N({1},{4})$.\n",
    "\n",
    "Экономика имеет два состояния мира - хорошее и плохое. При хорошем состоянии мира агент получает доход в размере 1000. При плохом состоянии мира доход составляет всего 250. \n",
    "\n",
    "Хорошее состояние мира происходит, когда X принимает значения меньше 5.\n",
    "\n",
    "Посчитайте ожидаемый доход агента, используя функцию <i>scipy.stats.norm.cdf()</i>."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ожидаемый доход равен сумме произведений доходов на вероятность получения этих доходов.\n",
    "\n",
    "# высчитайте вероятность наступления хорошего состояния мира\n",
    "P_good = sts.norm(__, __).cdf(__)\n",
    "\n",
    "Expected_outcome = P_good * ___ + (1 - ___) * ___\n",
    "\n",
    "print(Expected_outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "881.0085595514072\n"
     ]
    }
   ],
   "source": [
    "# ожидаемый доход равен сумме произведений доходов на вероятность получения этих доходов.\n",
    "\n",
    "# высчитайте вероятность наступления хорошего состояния мира\n",
    "P_good = sts.norm(1, 4).cdf(5)\n",
    "\n",
    "Expected_outcome = P_good * 1000 + (1 - P_good) * 250\n",
    "\n",
    "print(Expected_outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
